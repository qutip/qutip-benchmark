# Continous benchmarking tool for qutip

import json
import time

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from git import Repo

# Configuration
bm_repo_dir = "qutip-repo"
env_dir = "/home/rob/Desktop/continuous-benchmark/env/py2.7-qutip-benchmark"
bm_dir = "benchmarks"
bm_data = "benchmark_data.json"
bm_runs = 1

# load benchmark scripts
bm_files = !cd {bm_dir} && ls *.py
bm_names = [bm_file[:-3] for bm_file in bm_files]

# Load previous benchmark results
prev_data = None
try:
    with open(bm_data, "r") as f:
        prev_data = json.load(f)
except:
    pass

if not prev_data:
    print("No previous data, setting up new data structures")
    last_commit_timestamp = 1376258051 # 1363050005  #1363047005 #1353029892

    results = {}
    results['timestamp'] = []
    results['commit'] = []
    for bm_name in bm_names:
        results[bm_name] = []
else:
    print("Found previous data, setting up old data structures")
    last_commit_timestamp = prev_data['last_commit_timestamp']
    results = prev_data['results']
    
    # make sure that all bm files have a list in results record
    for bm_name in bm_names:
        if not results.has_key(bm_name):
            print("Missing data for %s. Padding with NaN" % bm_name)
            results[bm_name] = [float('nan')] * len(results['timestamp'])

if not 'commit' in results:
    results['commit'] = ['' for _ in results['timestamp']]
# Setup repository
repo = Repo(bm_repo_dir)
repo.git.checkout("master")
repo.git.pull()

commits = list(repo.iter_commits("master"))
recent_commits = list(reversed([c for c in commits if c.committed_date > last_commit_timestamp]))
print("Benchmarking %d new revisions" % len(recent_commits))

def qutip_install():
    !cd {bm_repo_dir} && {env_dir}/bin/python setup.py clean >> /dev/null
    !cd {bm_repo_dir} && {env_dir}/bin/python setup.py install >> /dev/null
    !cd {bm_repo_dir} && rm -rf qutip/_version.py >> /dev/null

for commit_idx, commit in enumerate(recent_commits):
    # checkout and install 
    if str(commit) in ["661ecf336311f39aef4277a1e99abc6a814ecdf9", "20738e4b93a986f772b4f7d633c3e64057abc18e", "661ecf336311f39aef4277a1e99abc6a814ecdf9"]:
        continue

    repo.git.checkout(commit)
    qutip_install()

    print("Benchmarking: %s: %s: %s [%.2f%%]" % (commit, commit.committer, time.ctime(commit.committed_date), (100.0 * commit_idx)/len(recent_commits)))
    
    results['timestamp'].append(commit.committed_date)    
    results['commit'].append(str(commit))    
    for idx, bm_file in enumerate(bm_files):
        elapsed = None
        try:
            elapsed = !{env_dir}/bin/python {bm_dir}/{bm_file} -r {bm_runs}
            results[bm_names[idx]].append(float(elapsed[-1]))
	    print(bm_names[idx] + " = " + str(float(elapsed[-1])))
        except Exception as e:
            print("Failed to store results for %s [%s]:%s" % (bm_file, str(elapsed), str(e)))
            results[bm_names[idx]].append(float('nan'))
        
    last_commit_timestamp = commit.committed_date

    # Save results
    data = {'results': results, 'last_commit_timestamp': last_commit_timestamp}
    with open("benchmark_data.json", "w") as f:
        json.dump(data, f)

# Generate plots
df = pd.DataFrame({bm_name: results[bm_name] for bm_name in bm_names},
                  index=results['timestamp'])
df.index = pd.to_datetime((df.index.values*1e9).astype(int))

for bm_name in bm_names:
    fig, ax = plt.subplots(1,1, figsize=(16, 4))
    
    try:
        #df[bm_name].plot(ax=ax, x_compat=True)
        ax.step(np.array(df.index.to_pydatetime()), np.array(df[bm_name]), lw=2)
        ax.set_title(bm_name)
        ax.set_ylabel("time (s)")
        fig.savefig("graphs/" + bm_name + ".png");
    except Exception as e:
        print("skipping %s: %s" % (bm_name, str(e)))


# Generate aggregate plot
df = pd.DataFrame({bm_name: np.array(results[bm_name]) / results[bm_name][0] for bm_name in bm_names},
                  index=results['timestamp'])
df.index = pd.to_datetime((df.index.values*1e9).astype(int))

fig, ax = plt.subplots(1,1, figsize=(16, 4))
for bm_name in bm_names:
    
    try:
        #df[bm_name].plot(ax=ax, x_compat=True)
        ax.step(np.array(df.index.to_pydatetime()), np.array(df[bm_name]), lw=2, label=bm_name)
    except Exception as e:
        print("skipping %s: %s" % (bm_name, str(e)))

ax.set_title("Normalized benchmarks")
ax.set_ylabel("time (s)")
lgd = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
fig.savefig("graphs/summary.png", bbox_extra_artists=(lgd,), bbox_inches='tight');

# Versions
%load_ext version_information
%version_information git, numpy, scipy, pandas, matplotlib

